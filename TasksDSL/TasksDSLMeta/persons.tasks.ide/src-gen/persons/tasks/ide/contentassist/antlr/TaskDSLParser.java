/*
 * generated by Xtext 2.12.0
 */
package persons.tasks.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import persons.tasks.ide.contentassist.antlr.internal.InternalTaskDSLParser;
import persons.tasks.services.TaskDSLGrammarAccess;

public class TaskDSLParser extends AbstractContentAssistParser {

	@Inject
	private TaskDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTaskDSLParser createParser() {
		InternalTaskDSLParser result = new InternalTaskDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPlanningAccess().getAlternatives_3(), "rule__Planning__Alternatives_3");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getBooleanExpressionLevel2Access().getAlternatives(), "rule__BooleanExpressionLevel2__Alternatives");
					put(grammarAccess.getBooleanExpressionLevel3Access().getAlternatives(), "rule__BooleanExpressionLevel3__Alternatives");
					put(grammarAccess.getExpressionLevel1Access().getAlternatives_1(), "rule__ExpressionLevel1__Alternatives_1");
					put(grammarAccess.getExpressionLevel2Access().getAlternatives_1(), "rule__ExpressionLevel2__Alternatives_1");
					put(grammarAccess.getExpressionLevel4Access().getAlternatives(), "rule__ExpressionLevel4__Alternatives");
					put(grammarAccess.getExpressionLevel5Access().getAlternatives(), "rule__ExpressionLevel5__Alternatives");
					put(grammarAccess.getBinaryBooleanOperatorAccess().getAlternatives(), "rule__BinaryBooleanOperator__Alternatives");
					put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
					put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
					put(grammarAccess.getPlanningAccess().getGroup(), "rule__Planning__Group__0");
					put(grammarAccess.getPersonAccess().getGroup(), "rule__Person__Group__0");
					put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
					put(grammarAccess.getTaskAccess().getGroup_6(), "rule__Task__Group_6__0");
					put(grammarAccess.getDurationAccess().getGroup(), "rule__Duration__Group__0");
					put(grammarAccess.getLunchActionAccess().getGroup(), "rule__LunchAction__Group__0");
					put(grammarAccess.getMeetingActionAccess().getGroup(), "rule__MeetingAction__Group__0");
					put(grammarAccess.getPaperActionAccess().getGroup(), "rule__PaperAction__Group__0");
					put(grammarAccess.getPaymentActionAccess().getGroup(), "rule__PaymentAction__Group__0");
					put(grammarAccess.getPaymentActionAccess().getGroup_0(), "rule__PaymentAction__Group_0__0");
					put(grammarAccess.getBooleanExpressionLevel1Access().getGroup(), "rule__BooleanExpressionLevel1__Group__0");
					put(grammarAccess.getBooleanExpressionLevel1Access().getGroup_1(), "rule__BooleanExpressionLevel1__Group_1__0");
					put(grammarAccess.getNotExpressionAccess().getGroup(), "rule__NotExpression__Group__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
					put(grammarAccess.getBooleanExpressionBracketAccess().getGroup(), "rule__BooleanExpressionBracket__Group__0");
					put(grammarAccess.getExpressionLevel1Access().getGroup(), "rule__ExpressionLevel1__Group__0");
					put(grammarAccess.getExpressionLevel1Access().getGroup_1_0(), "rule__ExpressionLevel1__Group_1_0__0");
					put(grammarAccess.getExpressionLevel1Access().getGroup_1_1(), "rule__ExpressionLevel1__Group_1_1__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup(), "rule__ExpressionLevel2__Group__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_0(), "rule__ExpressionLevel2__Group_1_0__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_1(), "rule__ExpressionLevel2__Group_1_1__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_2(), "rule__ExpressionLevel2__Group_1_2__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_3(), "rule__ExpressionLevel2__Group_1_3__0");
					put(grammarAccess.getExpressionLevel2Access().getGroup_1_4(), "rule__ExpressionLevel2__Group_1_4__0");
					put(grammarAccess.getExpressionLevel3Access().getGroup(), "rule__ExpressionLevel3__Group__0");
					put(grammarAccess.getExpressionLevel3Access().getGroup_1(), "rule__ExpressionLevel3__Group_1__0");
					put(grammarAccess.getExpressionMinusAccess().getGroup(), "rule__ExpressionMinus__Group__0");
					put(grammarAccess.getExpressionPlusAccess().getGroup(), "rule__ExpressionPlus__Group__0");
					put(grammarAccess.getExpressionBracketAccess().getGroup(), "rule__ExpressionBracket__Group__0");
					put(grammarAccess.getPlanningAccess().getNameAssignment_1(), "rule__Planning__NameAssignment_1");
					put(grammarAccess.getPlanningAccess().getAnonymousAssignment_2(), "rule__Planning__AnonymousAssignment_2");
					put(grammarAccess.getPlanningAccess().getPersonsAssignment_3_0(), "rule__Planning__PersonsAssignment_3_0");
					put(grammarAccess.getPlanningAccess().getTasksAssignment_3_1(), "rule__Planning__TasksAssignment_3_1");
					put(grammarAccess.getPersonAccess().getNameAssignment_1(), "rule__Person__NameAssignment_1");
					put(grammarAccess.getTaskAccess().getActionAssignment_1(), "rule__Task__ActionAssignment_1");
					put(grammarAccess.getTaskAccess().getPersonsAssignment_3(), "rule__Task__PersonsAssignment_3");
					put(grammarAccess.getTaskAccess().getPrioAssignment_5(), "rule__Task__PrioAssignment_5");
					put(grammarAccess.getTaskAccess().getDurationAssignment_6_1(), "rule__Task__DurationAssignment_6_1");
					put(grammarAccess.getDurationAccess().getDlAssignment_0(), "rule__Duration__DlAssignment_0");
					put(grammarAccess.getDurationAccess().getUnitAssignment_1(), "rule__Duration__UnitAssignment_1");
					put(grammarAccess.getLunchActionAccess().getLocationAssignment_1(), "rule__LunchAction__LocationAssignment_1");
					put(grammarAccess.getMeetingActionAccess().getTopicAssignment_1(), "rule__MeetingAction__TopicAssignment_1");
					put(grammarAccess.getPaperActionAccess().getReportAssignment_1(), "rule__PaperAction__ReportAssignment_1");
					put(grammarAccess.getPaymentActionAccess().getConditionAssignment_0_1(), "rule__PaymentAction__ConditionAssignment_0_1");
					put(grammarAccess.getPaymentActionAccess().getAmountAssignment_2(), "rule__PaymentAction__AmountAssignment_2");
					put(grammarAccess.getBooleanExpressionLevel1Access().getBopAssignment_1_1(), "rule__BooleanExpressionLevel1__BopAssignment_1_1");
					put(grammarAccess.getBooleanExpressionLevel1Access().getRightAssignment_1_2(), "rule__BooleanExpressionLevel1__RightAssignment_1_2");
					put(grammarAccess.getNotExpressionAccess().getSubAssignment_1(), "rule__NotExpression__SubAssignment_1");
					put(grammarAccess.getComparisonExpressionAccess().getLeftAssignment_1(), "rule__ComparisonExpression__LeftAssignment_1");
					put(grammarAccess.getComparisonExpressionAccess().getOpAssignment_2(), "rule__ComparisonExpression__OpAssignment_2");
					put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_3(), "rule__ComparisonExpression__RightAssignment_3");
					put(grammarAccess.getBooleanExpressionBracketAccess().getSubAssignment_1(), "rule__BooleanExpressionBracket__SubAssignment_1");
					put(grammarAccess.getBooleanExpressionConstantAccess().getValueAssignment(), "rule__BooleanExpressionConstant__ValueAssignment");
					put(grammarAccess.getExpressionLevel1Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel1__RightAssignment_1_0_2");
					put(grammarAccess.getExpressionLevel1Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel1__RightAssignment_1_1_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel2__RightAssignment_1_0_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel2__RightAssignment_1_1_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_2_2(), "rule__ExpressionLevel2__RightAssignment_1_2_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_3_2(), "rule__ExpressionLevel2__RightAssignment_1_3_2");
					put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_4_2(), "rule__ExpressionLevel2__RightAssignment_1_4_2");
					put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_2(), "rule__ExpressionLevel3__RightAssignment_1_2");
					put(grammarAccess.getExpressionMinusAccess().getSubAssignment_1(), "rule__ExpressionMinus__SubAssignment_1");
					put(grammarAccess.getExpressionPlusAccess().getSubAssignment_1(), "rule__ExpressionPlus__SubAssignment_1");
					put(grammarAccess.getExpressionBracketAccess().getSubAssignment_1(), "rule__ExpressionBracket__SubAssignment_1");
					put(grammarAccess.getExpressionConstantIntAccess().getValueAssignment(), "rule__ExpressionConstantInt__ValueAssignment");
					put(grammarAccess.getExpressionBalanceAccess().getValueAssignment(), "rule__ExpressionBalance__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TaskDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TaskDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
