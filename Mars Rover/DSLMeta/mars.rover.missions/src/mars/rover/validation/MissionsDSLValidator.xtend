/*
 * generated by Xtext 2.12.0
 */
package mars.rover.validation

import org.eclipse.xtext.validation.Check
import mars.rover.missionsDSL.Robot
import mars.rover.missionsDSL.MissionsDSLPackage.Literals
import mars.rover.missionsDSL.Mission
import mars.rover.missionsDSL.Action

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MissionsDSLValidator extends AbstractMissionsDSLValidator {
	
	@Check
	def checkSpeeds(Robot robot){
		if (robot !== null){
			if (robot.defaultSpeed < 0 || robot.defaultSpeed > 100){
				error("Speed values must be between 0 and 100", Literals.ROBOT__DEFAULT_SPEED);
			}
			if (robot.slowSpeed < 0 || robot.slowSpeed > 100){
				error("Speed values must be between 0 and 100", Literals.ROBOT__SLOW_SPEED);
			}
			if (robot.defaultSpeed >= 75){
				warning("Speed values greater than 75 can be too much", Literals.ROBOT__DEFAULT_SPEED);
			}
		}
	}
	
	@Check
	def checkAngles(Robot robot){
		if (robot !== null){
			if (robot.minAngle < 0 || robot.minAngle > 360){
				error("Angle values must be between 0 and 360", Literals.ROBOT__MIN_ANGLE);
			}
			if (robot.maxAngle < 0 || robot.maxAngle > 360){
				error("Angle values must be between 0 and 360", Literals.ROBOT__MAX_ANGLE);
			}
		}
	}
	
	@Check
	def checkRefreshRate(Robot robot){
		if (robot !== null){
			if (robot.refreshRate !== null)
			{
				if (robot.refreshRate.value < 0){
					error("Refresh values must be positive", Literals.ROBOT__REFRESH_RATE);
				} else if (robot.refreshRate.value < 50 ){
					warning("Refresh values less than 50 might impact performance", Literals.ROBOT__REFRESH_RATE);
				}
				if (robot.refreshRate.value > 1000 ){
					warning("Refresh values greater than 1000 might lead to delays", Literals.ROBOT__REFRESH_RATE);
				}
			}
		}
	}
	
	@Check
	def checkPriorities(Mission mission){
		if (mission !== null){
			if (mission.priority < 0 || mission.priority > 100){
				error("Priority must be between 0 and 100", Literals.MISSION__PRIORITY);
			}
		}
	}
	
	@Check
	def checkRepeatedPriorities(Robot robot){
		if (robot !== null){
			for(var int i = 0; i< robot.availableMissions.length; i++){
				for(var int j = 0; j< robot.availableMissions.length; j++){
					if(i != j){
						if(robot.availableMissions.get(i).priority == robot.availableMissions.get(j).priority){
							error("Priority must be unique, conflict: "+robot.availableMissions.get(i).name+ " "+ robot.availableMissions.get(j).name , Literals.ROBOT__START_MISSIONS);
						}
					
					}
					 
				}
			
			}
		}
	}
	
	@Check
	def checkDuration(Action action){
		if (action !== null && action.duration !== null){
			if (action.duration.value < 0){
				error("Duration must be positive", Literals.ACTION__DURATION);
			}
		}
	}
	
	@Check
	def checkAction(Action action){
		if (action !== null){
			switch action.action{
				case HALT: {
					if (action.value !== null){
						error("Halt doesn't support values", Literals.ACTION__VALUE);
					}
					if (action.duration !== null){
						error("Halt doesn't support duration", Literals.ACTION__DURATION);
					}
				}
				case PLAY: {
					if (action.value === null){
						error("Play needs an integer value", Literals.ACTION__VALUE);
					} else if (action.value.integer === null){
						error("Play needs an integer value", Literals.ACTION__VALUE);
					}
					if (action.duration === null){
						error("Play needs a duration in milliseconds", Literals.ACTION__DURATION);
					}
				}
				case REVERSE: {
					if (action.value !== null){
						error("Reverse doesn't support values", Literals.ACTION__VALUE);
					}
					if (action.duration === null){
						error("Reverse needs a duration in milliseconds", Literals.ACTION__DURATION);
					}
				}
				case ROTATE: {
					if (action.value !== null){
						error("Rotate doesn't support values", Literals.ACTION__VALUE);
					}
					if (action.duration !== null){
						error("Rotate doesn't support duration", Literals.ACTION__DURATION);
					}
				}
				case STOP: {
					if (action.value !== null){
						error("Stop doesn't support values", Literals.ACTION__VALUE);
					}
					if (action.duration !== null){
						error("Stop doesn't support duration", Literals.ACTION__DURATION);
					}
				}
				case MEASURE: {
					if (action.value !== null){
						error("Measure doesn't support values", Literals.ACTION__VALUE);
					}
					if (action.duration !== null){
						error("Measure doesn't support duration", Literals.ACTION__DURATION);
					}
				}
				case MOVE: {
					if (action.value !== null){
						error("Move doesn't support values", Literals.ACTION__VALUE);
					}
					if (action.duration === null){
						error("Move needs a duration in milliseconds", Literals.ACTION__DURATION);
					}
				}
				case LED: {
					if (action.value === null){
						error("LED needs a led_color value", Literals.ACTION__VALUE);
					}
					else {
						if (action.value.ledColor === null){
							error("LED needs a led_color value", Literals.ACTION__VALUE);
						}
					}
					if (action.duration === null){
						error("LED needs a duration in milliseconds", Literals.ACTION__DURATION);
					}
				}
				
			}
		}
	}
	
}

